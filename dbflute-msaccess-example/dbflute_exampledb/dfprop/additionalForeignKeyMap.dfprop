# /---------------------------------------------------------------------------
# [Additional Foreign Key]
#   additionalForeignKeyMap: (NotRequired - Default 'map:{}')
#
#   If foreign key does not exist in your database,
#   you can set up here as virtual foreign key for DBFlute.
#
#   And it's one-to-one relation if you add one fixed condition to 'many' table, 
#   you can set virtual foreign key with fixedCondition and fixedSuffix.
#
#    ex) map:{
#            ; FK_MEMBER_MEMBER_STATUS_CODE = map:{
#                ; localTableName  = MEMBER             ; foreignTableName  = MEMBER_STATUS
#                ; localColumnName = MEMBER_STATUS_CODE ; foreignColumnName = MEMBER_STATUS_CODE
#            }
#            ; FK_PURCHASE_MEMBER_ID = map:{
#                ; localTableName  = PURCHASE  ; foreignTableName  = MEMBER
#                ; localColumnName = MEMBER_ID ; foreignColumnName = MEMBER_ID
#            }
#            ; FK_PARENT_CHILD_ID = map:{
#                ; localTableName  = PARENT  ; foreignTableName  = CHILD
#                ; localColumnName = PARENT_ID ; foreignColumnName = CHILD_ID
#                ; fixedCondition = $$foreignAlias$$.CHILD_TYPE = 'BIG'
#                ; fixedSuffix = AsBig
#            }
#        }
#
map:{
    ; FK_MEMBER_MEMBER_ADDRESS_VALID = map:{
        ; localTableName  = MEMBER    ; foreignTableName  = MEMBER_ADDRESS
        ; localColumnName = MEMBER_ID ; foreignColumnName = MEMBER_ID
        ; fixedCondition = 
     $$foreignAlias$$.VALID_BEGIN_DATE <= /*targetDate(Date)*/null
 and $$foreignAlias$$.VALID_END_DATE >= /*targetDate(Date)*/null
        ; fixedSuffix = AsValid
    }

    # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
	# JdbcOdbcDriverではAccessのForeignKeyが取得できないため手動で設定する。
	# 
	# ただしBehaiviorでのJoinはできないので、設定のメリットは少ない。
	# EntityにFK先プロパティが自動で定義されて欲しい場合は設定する。
    # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
	; FK_PURCHASE_MEMBER = map:{
		; localTableName	= PURCHASE	; foreignTableName	= MEMBER
		; localColumnName	= MEMBER_ID	; foreignColumnName	= MEMBER_ID
	}
	; FK_PURCHASE_PRODUCT = map:{
		; localTableName	= PURCHASE	; foreignTableName	= PRODUCT
		; localColumnName	= PRODUCT_ID	; foreignColumnName	= PRODUCT_ID
	}
	; FK_MEMBER_WITHDRAWAL_MEMBER = map:{
		; localTableName	= MEMBER_WITHDRAWAL	; foreignTableName = MEMBER
		; localColumnName	= MEMBER_ID	; foreignColumnName	= MEMBER_ID
	}
	; FK_MEMBER_WITHDRAWAL_REASON = map:{
		; localTableName	= MEMBER_WITHDRAWAL	; foreignTableName = WITHDRAWAL_REASON
		; localColumnName	= WITHDRAWAL_REASON_CODE	; foreignColumnName	= WITHDRAWAL_REASON_CODE
	}
	; FK_MEMBER_SECURITY_MEMBER = map:{
		; localTableName	= MEMBER_SECURITY	; foreignTableName = MEMBER
		; localColumnName	= MEMBER_ID	; foreignColumnName	= MEMBER_ID
	}
	; FK_PRODUCT_PRODUCT_STATUS = map:{
		; localTableName	= PRODUCT	; foreignTableName = PRODUCT_STATUS
		; localColumnName	= PRODUCT_STATUS_CODE	; foreignColumnName	= PRODUCT_STATUS_CODE
	}
	; FK_MEMBER_MEMBER_STATUS = map:{
		; localTableName	= MEMBER	; foreignTableName = MEMBER_STATUS
		; localColumnName	= MEMBER_STATUS_CODE	; foreignColumnName	= MEMBER_STATUS_CODE
	}
	; FK_MEMBER_LOGIN_MEMBER_STATUS = map:{
		; localTableName	= MEMBER_LOGIN	; foreignTableName = MEMBER_STATUS
		; localColumnName	= LOGIN_MEMBER_STATUS_CODE	; foreignColumnName	= MEMBER_STATUS_CODE
	}
	; FK_MEMBER_LOGIN_MEMBER = map:{
		; localTableName	= MEMBER_LOGIN	; foreignTableName = MEMBER
		; localColumnName	= MEMBER_ID	; foreignColumnName	= MEMBER_ID
	}
	; FK_MEMBER_ADDRESS_MEMBER = map:{
		; localTableName	= MEMBER_ADDRESS	; foreignTableName = MEMBER
		; localColumnName	= MEMBER_ID	; foreignColumnName	= MEMBER_ID
	}
}
# ----------------/
